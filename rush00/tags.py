class Tags:
    """
    Analyzing data from tags.csv
    """
    def __init__(self, path_to_the_file):
        """
        Put here any fields that you think you will need.
        """
    def most_words(self, n):
        """
        Метод возвращает первые n тегов с наибольшим количеством слов внутри. это дикт
        где ключи — это теги, а значения — количество слов внутри тега. Отбросьте дубликаты.
        Отсортируйте его по номерам в порядке убывания.
        """
        return big_tags

    def longest(self, n):
        """
        Метод возвращает первые n самых длинных тегов по количеству символов.
        Это список тегов. Отбросьте дубликаты. Отсортируйте его по номерам в порядке убывания.
        """
        return big_tags

    def most_words_and_longest(self, n):
        """
        Метод возвращает пересечение первых n тегов с наибольшим количеством слов внутри и первых n самых длинных тегов
        с точки зрения количества символов. Отбросьте дубликаты. Это список тегов.
        """
        return big_tags
        
    def most_popular(self, n):
        """
        Метод возвращает самые популярные теги. Это словарь, где ключи — это теги, а значения — это счетчики.
         Отбросьте дубликаты. Отсортируйте его по количеству в порядке убывания.
        """
        return popular_tags
        
    def tags_with(self, word):
        """
        Метод возвращает все уникальные теги, содержащие слово, указанное в качестве аргумента.
        Отбросьте дубликаты.
        Это список тегов. Отсортируйте его по именам тегов в алфавитном порядке.
        """
        return tags_with_word
